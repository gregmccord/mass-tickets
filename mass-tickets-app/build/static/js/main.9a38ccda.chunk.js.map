{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","canRequest","setCanRequest","massDayTime","setMassDayTime","numPeople","setNumPeople","email","setEmail","show","setShow","spots","setSpots","sortedDays","setSortedDays","setPrevTickets","submitted","setSubmitted","useEffect","a","fetch","then","res","json","data","tickets","days","fetchNumTickets","length","handleShow","sendNew","fetchPrevTickets","handleClose","spotsAvailable","k","console","log","className","Spinner","animation","role","Form","Group","controlId","Label","Control","as","onChange","e","target","value","map","item","index","key","initString","getSpots","size","placeholder","type","test","String","toLowerCase","validateEmail","Button","block","onClick","Modal","onHide","Header","closeButton","Title","Body","Footer","variant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9a38ccda.chunk.js","sourcesContent":["import React, { useState , useEffect } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n\n  const [canRequest, setCanRequest] = useState(false);\n  const [massDayTime, setMassDayTime] = useState(\"---\");\n  const [numPeople, setNumPeople] = useState(\"---\");\n  const [email, setEmail] = useState(\"\");\n  const [show, setShow] = useState(false);\n  const [spots, setSpots] = useState(null);\n  const [sortedDays, setSortedDays] = useState(null);\n  const [prevTickets, setPrevTickets] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n\n  useEffect(() => {\n    async function fetchNumTickets() {\n      fetch('/getNumTickets').then(res => res.json()).then(data => {\n        setSpots(data.tickets);\n        setSortedDays(data.days);\n      });\n    }\n    fetchNumTickets();\n  }, []);\n\n  useEffect(() => {\n    if (submitted) {\n      async function fetchPrevTickets() {\n        let data = await fetch('/getPrevTickets?mass_day_time=' + massDayTime + '&email=' + email).then(res => res.json());\n        setPrevTickets(data.tickets);\n\n        if (data.tickets.length > 0) {\n          handleShow();\n        }\n        else {\n          sendNew();\n        }\n      }\n    fetchPrevTickets();\n    }\n\n  }, [submitted]); // eslint-disable-line\n\n  const handleShow = () => setShow(true);\n  const handleClose = () => {setShow(false); setSubmitted(false);};\n  const handleResend = () => {setShow(false); resend(); };\n  const handleNew = () => {setShow(false); sendNew(); };\n\n  function validateEmail(email) {\n    // eslint-disable-next-line\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }\n\n  function canSubmit() {\n    if (massDayTime === \"---\" || numPeople === \"---\") {\n      return false;\n    }\n\n    if (spots[massDayTime][numPeople] > 0 && validateEmail(email)) {\n      if (!canRequest) {\n        setCanRequest(true);\n      }\n      \n      return true;\n    }\n    else {\n      if (canRequest) {\n        setCanRequest(false);\n      }\n\n      return false;\n    }\n  }\n\n  function spotsAvailable() {\n    for (let k in spots[massDayTime]) {\n      if (spots[massDayTime][k] > 0) {\n        return true\n      }\n    }\n\n    return false;\n  }\n\n  function getSpots() {\n    let initString = \"\";\n\n    initString += \"Spots remaining for 1-2 people: \" + spots[massDayTime][\"1-2\"] + \"\\n\";\n    initString += \"Spots remaining for 3-4 people: \" + spots[massDayTime][\"3-4\"] + \"\\n\";\n    initString += \"Spots remaining for 5-6 people: \" + spots[massDayTime][\"5-6\"] + \"\\n\";\n    initString += \"\\n\"\n\n    return initString;\n  }\n\n  function handleSubmit() {\n    setSubmitted(true);\n  }\n\n  function sendNew() {\n    console.log(\"New!\");\n    setSubmitted(false);\n  }\n\n  function resend() {\n    console.log(\"Old!\");\n    setSubmitted(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        St. Mary's of the Assumption Mass Ticket App\n      </header>\n      <div className=\"App-Body\">\n        { (spots === null || sortedDays === null) &&\n          <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n          </div>\n        }\n        { (spots !== null && sortedDays !== null) &&\n          <Form className=\"Request-ticket\">\n            <Form.Group controlId=\"MassDayTime\">\n              <Form.Label>Mass Day/Time</Form.Label>\n              <Form.Control as=\"select\" onChange={e => setMassDayTime(e.target.value)}>\n                <option>---</option>\n                {\n                  sortedDays.map((item, index) => ( \n                    <option key={index}>{item}</option> \n                  ))\n                }\n              </Form.Control>\n            </Form.Group>\n            { (!spotsAvailable() && massDayTime !== \"---\") &&\n              <div>\n                There are no spots remaining for this mass.\n              </div>\n            }\n            { (spotsAvailable() && massDayTime !== \"---\") &&\n              <div>\n                <div>\n                  {getSpots()}\n                </div>\n                <Form.Group controlId=\"Email\" size=\"lg\">\n                  <Form.Label>Email Address</Form.Label>\n                  <Form.Control\n                    placeholder=\"name@example.com\"\n                    value={email}\n                    onChange={e => setEmail(e.target.value)}\n                    type=\"email\"\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"NumberPeople\">\n                  <Form.Label>Select Number of People</Form.Label>\n                  <Form.Control as=\"select\" value={numPeople} onChange={e => setNumPeople(e.target.value)}>\n                    <option>---</option>\n                    <option>1-2</option>\n                    <option>3-4</option>\n                    <option>5-6</option>\n                  </Form.Control>\n                </Form.Group>\n              </div>\n            }\n            { (massDayTime !== \"---\" && spots[massDayTime][numPeople] <= 0 && setNumPeople !== \"---\" && spotsAvailable()) &&\n              <div className=\"Selection-Alert\">\n                ***There are no spots remaining for {numPeople} people at this mass. Please select a dfferent group size or a different mass.\n              </div>\n            }\n            { canSubmit() &&\n              <Form.Group>\n                <Button block size=\"lg\" type=\"button\" onClick={handleSubmit}>\n                  Get Ticket\n                </Button>\n              </Form.Group>\n            }\n          </Form>\n        }\n        { submitted &&\n          <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n          </div>\n        }\n      </div>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Alert</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          We see that you have already signed up for this mass with this email address.\n          If you need an additional ticket, press Confirm. If you need us to re-send your ticket(s),\n          press Re-send.\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleResend}>\n            Re-send\n          </Button>\n          <Button variant=\"primary\" onClick={handleNew}>\n            Confirm\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}